--- src/llvm/projects/libtapi/lib/Core/FileSystem.cpp	Mon Nov 30 09:20:47 2020
+++ src/llvm/projects/libtapi/lib/Core/FileSystem.cpp	Mon Nov 30 09:16:40 2020
@@ -32,8 +32,8 @@
 
   errno = 0;
   const char *ptr = nullptr;
-  if ((ptr = ::realpath(path.data(), result.data())) == nullptr)
-    return {errno, std::generic_category()};
+//  if ((ptr = ::realpath(path.data(), result.data())) == nullptr)
+//    return {errno, std::generic_category()};
 
   assert(ptr == result.data() && "Unexpected pointer");
   result.set_size(strlen(result.data()));
@@ -47,8 +47,8 @@
   auto p = path.toNullTerminatedStringRef(pathStorage);
   SmallString<PATH_MAX> result;
   ssize_t len;
-  if ((len = ::readlink(p.data(), result.data(), PATH_MAX)) == -1)
-    return {errno, std::generic_category()};
+//  if ((len = ::readlink(p.data(), result.data(), PATH_MAX)) == -1)
+//    return {errno, std::generic_category()};
 
   result.set_size(len);
   linkPath.swap(result);
--- src/llvm/projects/libtapi/lib/CMakeLists.txt	Mon Nov 30 09:20:47 2020
+++ src/llvm/projects/libtapi/lib/CMakeLists.txt	Mon Nov 30 09:16:40 2020
@@ -4,4 +4,4 @@
 #add_subdirectory(Diagnostics)
 #add_subdirectory(Driver)
 #add_subdirectory(Frontend)
-add_subdirectory(NoInits)
+#add_subdirectory(NoInits)
--- src/llvm/projects/libtapi/tools/libtapi/CMakeLists.txt	Mon Nov 30 09:20:48 2020
+++ src/llvm/projects/libtapi/tools/libtapi/CMakeLists.txt	Mon Nov 30 09:16:40 2020
@@ -1,4 +1,3 @@
-set(LLVM_EXPORTED_SYMBOL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/libtapi.exports)
 set(LLVM_LINK_COMPONENTS
   Support
   )
@@ -12,7 +11,6 @@
 
   LINK_LIBS
   tapiCore
-  tapiNoInits
 
   NO_INSTALL_RPATH
   )
--- src/llvm/CMakeLists.txt	Mon Nov 30 09:20:27 2020
+++ src/llvm/CMakeLists.txt	Mon Nov 30 09:17:26 2020
@@ -285,20 +285,9 @@
 # List of all targets to be built by default:
 set(LLVM_ALL_TARGETS
   AArch64
-  AMDGPU
   ARM
-  BPF
-  Hexagon
-  Lanai
-  Mips
-  MSP430
-  NVPTX
   PowerPC
-  Sparc
-  SystemZ
-  WebAssembly
   X86
-  XCore
   )
 
 # List of targets with JIT support:
--- build.sh	Mon Nov 30 09:20:27 2020
+++ /dev/null	Thu Jan  1 01:00:00 1970
@@ -1,84 +0,0 @@
-#!/usr/bin/env bash
-
-set -e
-
-TAPI_REPOSITORY=1100.0.11
-TAPI_VERSION=11.0.0 # ?!
-
-pushd "${0%/*}" &>/dev/null
-source tools/tools.sh
-
-rm -rf build
-mkdir build
-
-pushd build &>/dev/null
-
-CMAKE_EXTRA_ARGS=""
-
-if [ $OPERATING_SYSTEM == "Android" ]; then
-  export CC="$CC -D__ANDROID_API__=26"
-  export CXX="$CXX -D__ANDROID_API__=26"
-fi
-
-if [ "$TARGET" == "Darwin" ]; then
-  #export MACOSX_DEPLOYMENT_TARGET=10.9
-  CMAKE_EXTRA_ARGS+="-DCMAKE_SYSTEM_NAME=Darwin "
-  export CC="$(xcrun -f clang) -stdlib=libc++"
-  export CXX="$(xcrun -f clang++) -stdlib=libc++"
-elif [ "$TARGET" == "iOS" ]; then
-  unset MACOSX_DEPLOYMENT_TARGET
-  CMAKE_EXTRA_ARGS+="-DCMAKE_SYSTEM_NAME=Darwin "
-  export CC="arm-apple-darwin11-clang -stdlib=libc++"
-  export CXX="arm-apple-darwin11-clang++ -stdlib=libc++"
-elif [ "$TARGET" == "iOS-ARMV7" ]; then
-  unset MACOSX_DEPLOYMENT_TARGET
-  CMAKE_EXTRA_ARGS+="-DCMAKE_SYSTEM_NAME=Darwin "
-  export CC="arm-apple-darwin11-clang -arch armv7 -stdlib=libc++"
-  export CXX="arm-apple-darwin11-clang++ -arch armv7 -stdlib=libc++"
-elif [ "$TARGET" == "FreeBSD" ]; then
-  CMAKE_EXTRA_ARGS+="-DCMAKE_SYSTEM_NAME=FreeBSD "
-  export CC=amd64-pc-freebsd13.0-clang
-  export CXX=amd64-pc-freebsd13.0-clang++
-elif [ "$TARGET" == "MINGW64" ]; then
-  CMAKE_EXTRA_ARGS+="-DCMAKE_SYSTEM_NAME=Windows "
-  export CC=x86_64-w64-mingw32-gcc
-  export CXX=x86_64-w64-mingw32-g++
-elif [ "$TARGET" == "MINGW32" ]; then
-  CMAKE_EXTRA_ARGS+="-DCMAKE_SYSTEM_NAME=Windows "
-  export CC=i686-w64-mingw32-gcc
-  export CXX=i686-w64-mingw32-g++
-fi
-
-if [ -z "$INSTALLPREFIX" ]; then
-  INSTALLPREFIX="/usr/local"
-fi
-
-# TODO: Fix this in a better way.
-INCLUDE_FIX="-I $PWD/../src/llvm/projects/clang/include "
-INCLUDE_FIX+="-I $PWD/projects/clang/include "
-
-echo -n $INSTALLPREFIX > INSTALLPREFIX
-
-cmake ../src/llvm \
- -DCMAKE_CXX_FLAGS="$INCLUDE_FIX" \
- -DLLVM_INCLUDE_TESTS=OFF \
- -DCMAKE_BUILD_TYPE=RELEASE \
- -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX \
- -DTAPI_REPOSITORY_STRING=$TAPI_REPOSITORY \
- -DTAPI_FULL_VERSION=$TAPI_VERSION \
- $CMAKE_EXTRA_ARGS
-
-echo ""
-echo "## Building clangBasic ##"
-echo ""
-
-$MAKE clangBasic -j $JOBS
-
-echo ""
-echo "## Building libtapi ##"
-echo ""
-
-$MAKE libtapi -j $JOBS
-
-popd &>/dev/null
-popd &>/dev/null
--- install.sh	Mon Nov 30 09:20:27 2020
+++ /dev/null	Thu Jan  1 01:00:00 1970
@@ -1,14 +0,0 @@
-#!/usr/bin/env bash
-
-set -e
-
-pushd "${0%/*}" &>/dev/null
-source tools/tools.sh
-pushd build &>/dev/null
-
-INSTALLPREFIX=$(cat INSTALLPREFIX)
-
-$MAKE install-libtapi install-tapi-headers -j $JOBS
-
-popd &>/dev/null
-popd &>/dev/null
--- /dev/null	Thu Jan  1 01:00:00 1970
+++ buildnew.sh	Mon Nov 30 09:10:35 2020
@@ -0,0 +1,87 @@
+#!/usr/bin/env bash
+
+set -e
+
+TAPI_REPOSITORY=1100.0.11
+TAPI_VERSION=11.0.0 # ?!
+
+pushd "${0%/*}" &>/dev/null
+source tools/tools.sh
+
+rm -rf build
+mkdir build
+
+pushd build &>/dev/null
+
+CMAKE_EXTRA_ARGS=""
+HOST_TRIPLE=""
+
+if [ -z "$INSTALLPREFIX" ]; then
+  INSTALLPREFIX="/usr/local"
+fi
+
+if [ "$(which ninja)" != "" ]; then
+    CMAKE_GENERATOR=-G"Ninja"
+    NINJA=1
+else
+    CMAKE_GENERATOR=-G"MSYS Makefiles"
+    HOST_TRIPLE=x86_64-pc-mingw32
+    # CMAKE_GENERATOR=-G"MinGW Makefiles"
+fi
+
+INCLUDE_FIX=""
+INCLUDE_FIX+="-I $PWD/../src/llvm/projects/clang/include "
+INCLUDE_FIX+="-I $PWD/projects/clang/include "
+INCLUDE_FIX+="-Wno-error=deprecated-copy "
+INCLUDE_FIX+="-Wno-error=implicit-fallthrough "
+INCLUDE_FIX+="-Wno-error=range-loop-construct "
+INCLUDE_FIX+="-Wno-error=unused-function "
+INCLUDE_FIX+="-Wno-error=switch "
+INCLUDE_FIX+="-Wno-error=return-type "
+INCLUDE_FIX+="-Wno-error=unused-variable "
+INCLUDE_FIX+="-Wno-error=uninitialized "
+INCLUDE_FIX+="-Wno-error=deprecated-copy "
+INCLUDE_FIX+="-Wno-error=implicit-fallthrough "
+INCLUDE_FIX+="-Wno-error=range-loop-construct "
+# INCLUDE_FIX+="_GNU_SOURCE=1"
+
+echo -n $INSTALLPREFIX > INSTALLPREFIX
+
+cmake ../src/llvm \
+ -DCMAKE_C_FLAGS="$INCLUDE_FIX" \
+ -DCMAKE_CXX_FLAGS="$INCLUDE_FIX" \
+ -DCMAKE_C_COMPILER=clang \
+ -DCMAKE_CXX_COMPILER=clang++ \
+ -DLLVM_INCLUDE_TESTS=OFF \
+ -DCMAKE_BUILD_TYPE=RELEASE \
+ -DCMAKE_INSTALL_PREFIX=$INSTALLPREFIX \
+ -DTAPI_REPOSITORY_STRING=$TAPI_REPOSITORY \
+ -DTAPI_FULL_VERSION=$TAPI_VERSION \
+ -DLLVM_INFERRED_HOST_TRIPLE=$HOST_TRIPLE \
+ -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
+ -DLLVM_TARGETS_TO_BUILD="AArch64;ARM;PowerPC;X86" \
+ -DCLANG_DEFAULT_LINKER=lld \
+ "$CMAKE_GENERATOR" \
+ $CMAKE_EXTRA_ARGS
+
+echo ""
+echo "## Building clangBasic ##"
+echo ""
+
+cmake --build . --target clangBasic
+
+echo ""
+echo "## Building libtapi ##"
+echo ""
+
+cmake --build . --target libtapi
+
+echo ""
+echo "## Installing libtapi ##"
+echo ""
+
+cmake --build . --target install-libtapi
+cmake --build . --target install-tapi-headers
+
+popd &>/dev/null
+popd &>/dev/null
